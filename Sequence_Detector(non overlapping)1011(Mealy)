module sequence_detector(
    input clk,
    input reset,
    input in,
    output reg out
);

    // State encoding
    typedef enum reg [2:0] {
        S0 = 3'b000,
        S1 = 3'b001,
        S2 = 3'b010,
        S3 = 3'b011,
        S4 = 3'b100
    } state_t;

    state_t current_state, next_state;

    // State transition logic (Moore FSM)
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            S0: if (in) next_state = S1; else next_state = S0;
            S1: if (in) next_state = S2; else next_state = S0;
            S2: if (in) next_state = S2; else next_state = S3;
            S3: if (in) next_state = S4; else next_state = S0;
            S4: if (in) next_state = S2; else next_state = S0;
            default: next_state = S0;
        endcase
    end

    // Output logic (Moore FSM)
    always @(posedge clk or posedge reset) begin
        if (reset)
            out <= 0;
        else
            out <= (current_state == S4);
    end

endmodule



module tb_sequence_detector;
    reg clk,in,reset;
    wire out;
  sequence_detector uut (.clk(clk),.reset(reset),.in(in),.out(out));
    always #5 clk = ~clk;
    initial begin
      {clk,reset,in} = 0;
      reset = 1;
        #10;
      reset = 0;
	  $display("Time\tin\tout");
      $monitor("%0d\t%b\t%b", $time, in, out);
      $dumpfile("tb_sequence_detector.vcd");
      $dumpvars(1,tb_sequence_detector);
      // Apply sequence: 1101
        in = 1; #10; // 1
        in = 1; #10; // 1
        in = 0; #10; // 0
        in = 1; #10; // 1 -> Detected

        // Apply sequence: 01101
        in = 0; #10; // 0
        in = 1; #10; // 1
        in = 1; #10; // 1
        in = 0; #10; // 0
        in = 1; #10; // 1 -> Detected

        // Apply sequence: 11101101
        in = 1; #10; // 1
        in = 1; #10; // 1
        in = 1; #10; // 1
        in = 0; #10; // 0
        in = 1; #10; // 1 -> Detected
        in = 1; #10; // 1
        in = 0; #10; // 0
        in = 1; #10; // 1 -> Detected
        $finish;
    end
endmodule
